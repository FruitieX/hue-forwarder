const Hapi = require('hapi');
const request = require('request-promise-native');

require('dotenv').config();

// Autogenerated config fields
process.env.SERIAL_NUMBER = process.env.FORWARDER_MAC.replace(/:/g, '');
process.env.BRIDGE_ID = [
  process.env.SERIAL_NUMBER.slice(0, 6),
  'fffe',
  process.env.SERIAL_NUMBER.slice(6)
].join('').toUpperCase();

// Server setup
const server = new Hapi.Server();
server.connection({ port: process.env.FORWARDER_PORT });

// "Catch-all" route
server.route({
  method: '*',
  path: '/{p*}',
  handler: async (req, reply) => {
    console.log(`Forwarding: ${req.method} ${req.url.path}`);

    const response = await request({
      url: `http://${process.env.HUE_IP}${req.url.path}`,
      method: req.method,
      headers: req.headers,
      body: req.payload || undefined,
      json: true,
    });

    reply(response);
  }
});

// Load any plugins
server.register(
  [
    require('./plugins/ssdp-discovery'),
    require('./plugins/config-spoofer'),
    require('./plugins/ws-server'),
    {
      register: require('./plugins/scene-spy'),
      options: { groups: [ 0, 1 ], pollDelay: 100, duplicateSceneChange: true },
    },
    {
      register: require('./plugins/scenes/sunlight'),
      options: { sceneId: 'NFdJj2xpbz9mivi' },
    },
    {
      register: require('./plugins/scenes/party'),
      options: { sceneId: 'gQ0XG0Jf0KaBFPY' },
    },
  ], (err) => {
    if (err) {
      console.error('Failed to load a plugin:', err);
    }

    server.start(err => {
      if (err) {
        throw err;
      }
      console.log(`Server running at: ${server.info.uri}`);
    });
  }
);
