const http = require('http');
const Hapi = require('hapi');
const request = require('request');
const SsdpServer = require('node-ssdp').Server;
const generateDescription = require('./description');

require('dotenv').config();

// Autogenerated config fields
process.env.DEVICE_TYPE = 'urn:schemas-upnp-org:device:Basic:1';
process.env.SERIAL_NUMBER = process.env.FORWARDER_MAC.replace(/:/g, '');
process.env.UDN = `uuid:2f402f80-da50-11e1-9b23-${process.env.SERIAL_NUMBER}`;
process.env.BRIDGE_ID = [
  process.env.SERIAL_NUMBER.slice(0, 6),
  'fffe',
  process.env.SERIAL_NUMBER.slice(6)
].join('').toUpperCase();

/* SSDP server setup */
const ssdp = new SsdpServer({
  adInterval: 2000,
  ssdpSig: 'Linux/3.14.0 UPnP/1.0 IpBridge/1.16.0',
  location: `http://${process.env.FORWARDER_IP}:80/description.xml`,
  udn: process.env.UDN,
});
ssdp.addUSN(process.env.DEVICE_TYPE);
ssdp.start();

/* Forwarder setup */
// Spoof bridge config with hue-forwarder config
const modifyBody = body => {
  let config = body.config ? body.config : body;

  if (config.mac) {
    config.mac = process.env.FORWARDER_MAC;
  }
  if (config.bridgeid) {
    config.bridgeid = process.env.BRIDGE_ID
  }
  if (config.ipaddress) {
    config.ipaddress = process.env.FORWARDER_IP;
  }
  if (config.name) {
    config.name = process.env.BRIDGE_NAME;
  }

  return body;
};

const forwarder = new Hapi.Server();
forwarder.connection({ port: process.env.FORWARDER_PORT });

const doForward = (req, cb) =>
  request(
    {
      url: `http://${process.env.HUE_IP}${req.url.path}`,
      method: req.method,
      headers: req.headers,
      body: req.payload && JSON.stringify(req.payload),
    },
    cb,
  );

forwarder.route([
  // Intercept GET /api/{username}/config, GET /api/{username}, GET /description.xml:
  // spoof bridge config fields with forwarder config
  {
    method: 'GET',
    path: '/api/{username}/config',
    handler: (req, reply) =>
      doForward(req, (err, hueRes) =>
        reply(modifyBody(JSON.parse(hueRes.body))),
      ),
  },
  {
    method: 'GET',
    path: '/api/{username}',
    handler: (req, reply) =>
      doForward(req, (err, hueRes) =>
        reply(modifyBody(JSON.parse(hueRes.body))),
      ),
  },
  {
    method: 'GET',
    path: '/description.xml',
    handler: (req, reply) =>
      reply(generateDescription(process.env))
  },

  // "Catch-all" route
  {
    method: '*',
    path: '/{p*}',
    handler: (req, reply) => {
      //console.log(`Forwarding: ${req.method} ${req.url.path}`);

      doForward(req, (err, hueRes) => {
        reply(
          hueRes.headers['content-type'] === 'application/json'
            ? JSON.parse(hueRes.body)
            : hueRes.body,
        );
      });
    },
  },
]);

// Load any plugins
forwarder.register([{
  register: require('./plugins/scene-spy'),
  options: { groupId: 0 }
}], (err) => {
  if (err) {
    console.error('Failed to load a plugin:', err);
  }
});

forwarder.start(err => {
  if (err) {
    throw err;
  }
  console.log(`Server running at: ${forwarder.info.uri}`);
});
