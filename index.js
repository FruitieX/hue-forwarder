const http = require('http');
const Hapi = require('hapi');
const request = require('request');
const SsdpServer = require('node-ssdp').Server;
const generateDescription = require('./description');

const config = {
  // IP address of the target Hue bridge
  HUE_IP: '192.168.1.111',

  // Name of forwarded bridge
  BRIDGE_NAME: 'Philips Hue (Forwarded)',

  // FORWARDER_PORT is the listen port of this service.
  // Hue apps will only try port 80, so this service has to be reachable
  // on port 80 either directly or through a reverse proxy.
  FORWARDER_PORT: 5678,

  // Spoof all IP addresses with FORWARDER_IP, should match IP of this service
  FORWARDER_IP: '192.168.1.101',

  // This probably doesn't matter
  FORWARDER_MAC: 'de:ad:be:ef:13:37',
};

// Autogenerated config fields
config.DEVICE_TYPE = 'urn:schemas-upnp-org:device:Basic:1';
config.SERIAL_NUMBER = config.FORWARDER_MAC.replace(/:/g, '');
config.UDN = `uuid:2f402f80-da50-11e1-9b23-${config.SERIAL_NUMBER}`;
config.BRIDGE_ID = [
  config.SERIAL_NUMBER.slice(0, 6),
  'fffe',
  config.SERIAL_NUMBER.slice(6)
].join('').toUpperCase();

/* SSDP server setup */
const ssdp = new SsdpServer({
  adInterval: 2000,
  ssdpSig: 'Linux/3.14.0 UPnP/1.0 IpBridge/1.16.0',
  location: `http://${config.FORWARDER_IP}:80/description.xml`,
  udn: config.UDN,
});
ssdp.addUSN(config.DEVICE_TYPE);
ssdp.start();

/* Forwarder setup */
// Spoof bridge config with hue-forwarder config
const modifyBody = body => {
  let bridgeConfig = body.config ? body.config : body;

  if (bridgeConfig.mac) {
    bridgeConfig.mac = config.FORWARDER_MAC;
  }
  if (bridgeConfig.bridgeid) {
    bridgeConfig.bridgeid = config.BRIDGE_ID
  }
  if (bridgeConfig.ipaddress) {
    bridgeConfig.ipaddress = config.FORWARDER_IP;
  }
  if (bridgeConfig.name) {
    bridgeConfig.name = config.BRIDGE_NAME;
  }

  return body;
};

const forwarder = new Hapi.Server();
forwarder.connection({ port: config.FORWARDER_PORT });

const doForward = (req, cb) =>
  request(
    {
      url: `http://${config.HUE_IP}${req.url.path}`,
      method: req.method,
      headers: req.headers,
      body: req.payload && JSON.stringify(req.payload),
    },
    cb,
  );

forwarder.route([
  // Intercept GET /api/{username}/config, GET /api/{username}, GET /description.xml:
  // spoof bridge config fields with forwarder config
  {
    method: 'GET',
    path: '/api/{username}/config',
    handler: (req, reply) =>
      doForward(req, (err, hueRes) =>
        reply(modifyBody(JSON.parse(hueRes.body))),
      ),
  },
  {
    method: 'GET',
    path: '/api/{username}',
    handler: (req, reply) =>
      doForward(req, (err, hueRes) =>
        reply(modifyBody(JSON.parse(hueRes.body))),
      ),
  },
  {
    method: 'GET',
    path: '/description.xml',
    handler: (req, reply) =>
      reply(generateDescription(config))
  },

  // "Catch-all" route
  {
    method: '*',
    path: '/{p*}',
    handler: (req, reply) => {
      console.log(`Forwarding: ${req.method} ${req.url.path}`);

      doForward(req, (err, hueRes) => {
        reply(
          hueRes.headers['content-type'] === 'application/json'
            ? JSON.parse(hueRes.body)
            : hueRes.body,
        );
      });
    },
  },

  // You can add handlers for any Hue API routes here and implement your custom logic.
  // Remember to forward the request to the bridge and the response back to the user!
  //
  // Some examples below:
  {
    method: 'PUT',
    path: '/api/{username}/groups/{groupId}/action',
    handler: (req, reply) => {
      doForward(req, (err, hueRes) => {
        console.log(`Group ${req.params.groupId} scene changed to:`, req.payload.scene);
        reply(JSON.parse(hueRes.body));
      });
    },
  },
  {
    method: 'PUT',
    path: '/api/{username}/lights/{lightId}/state',
    handler: (req, reply) => {
      doForward(req, (err, hueRes) => {
        console.log(`Light ${req.params.lightId} state changed to:`, req.payload);
        reply(JSON.parse(hueRes.body));
      });
    },
  },
]);

forwarder.start(err => {
  if (err) {
    throw err;
  }
  console.log(`Server running at: ${forwarder.info.uri}`);
});
